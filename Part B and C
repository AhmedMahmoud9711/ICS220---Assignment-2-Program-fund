class Guest:
    """Represents a hotel guest."""

    def __init__(self, guest_id, name, email, contact_number, loyalty_status):
        self.__guest_id = guest_id
        self.__name = name
        self.__email = email
        self.__contact_number = contact_number
        self.__loyalty_status = loyalty_status

    def get_name(self):
        return self.__name

    def set_name(self, name):
        self.__name = name

    def __str__(self):
        return f"Guest[{self.__guest_id}]: {self.__name}, {self.__email}, Loyalty: {self.__loyalty_status}"


class Room:
    """Represents a hotel room."""

    def __init__(self, room_number, room_type, price_per_night, amenities, availability):
        self.__room_number = room_number
        self.__room_type = room_type
        self.__price_per_night = price_per_night
        self.__amenities = amenities
        self.__availability = availability

    def is_available(self):
        return self.__availability

    def __str__(self):
        return f"Room[{self.__room_number}]: {self.__room_type}, ${self.__price_per_night}/night, Available: {self.__availability}"


class Booking:
    """Represents a room booking."""

    def __init__(self, booking_id, check_in_date, check_out_date, status):
        self.__booking_id = booking_id
        self.__check_in_date = check_in_date
        self.__check_out_date = check_out_date
        self.__status = status
        self.__services = []

    def add_service_request(self, service_request):
        self.__services.append(service_request)

    def __str__(self):
        return f"Booking[{self.__booking_id}]: {self.__check_in_date} to {self.__check_out_date}, Status: {self.__status}"


class Invoice:
    """Represents an invoice for a booking."""

    def __init__(self, invoice_id, booking_id, amount, payment_method, discounts):
        self.__invoice_id = invoice_id
        self.__booking_id = booking_id
        self.__amount = amount
        self.__payment_method = payment_method
        self.__discounts = discounts

    def __str__(self):
        return f"Invoice[{self.__invoice_id}]: BookingID {self.__booking_id}, Amount: ${self.__amount}, Payment: {self.__payment_method}"


class LoyaltyProgram:
    """Represents a guestâ€™s loyalty program status."""

    def __init__(self, points, membership_level, rewards):
        self.__points = points
        self.__membership_level = membership_level
        self.__rewards = rewards

    def add_points(self, pts):
        self.__points += pts

    def __str__(self):
        return f"Loyalty: {self.__membership_level}, Points: {self.__points}, Rewards: {self.__rewards}"


class ServiceRequest:
    """Represents a guest's request during stay."""

    def __init__(self, request_id, request_type, request_date, status):
        self.__request_id = request_id
        self.__request_type = request_type
        self.__request_date = request_date
        self.__status = status

    def __str__(self):
        return f"Request[{self.__request_id}]: {self.__request_type} on {self.__request_date}, Status: {self.__status}"


class Feedback:
    """Represents guest feedback after their stay."""

    def __init__(self, feedback_id, guest_id, rating, comments):
        self.__feedback_id = feedback_id
        self.__guest_id = guest_id
        self.__rating = rating
        self.__comments = comments

    def __str__(self):
        return f"Feedback[{self.__feedback_id}]: Guest {self.__guest_id}, Rating: {self.__rating}, Comment: {self.__comments}"


# Redefining classes after kernel reset for executing custom test suite again

class Guest:
    def __init__(self, guest_id, name, email, contact_number, loyalty_status):
        self.__guest_id = guest_id
        self.__name = name
        self.__email = email
        self.__contact_number = contact_number
        self.__loyalty_status = loyalty_status

    def __str__(self):
        return f"Guest[{self.__guest_id}]: {self.__name}, {self.__email}, Loyalty: {self.__loyalty_status}"


class Room:
    def __init__(self, room_number, room_type, price_per_night, amenities, availability):
        self.__room_number = room_number
        self.__room_type = room_type
        self.__price_per_night = price_per_night
        self.__amenities = amenities
        self.__availability = availability

    def is_available(self):
        return self.__availability

    def __str__(self):
        return f"Room[{self.__room_number}]: {self.__room_type}, ${self.__price_per_night} /night, Available: {self.__availability}"


class Booking:
    def __init__(self, booking_id, check_in_date, check_out_date, status):
        self.__booking_id = booking_id
        self.__check_in_date = check_in_date
        self.__check_out_date = check_out_date
        self.__status = status

    def __str__(self):
        return f"Booking[{self.__booking_id}]: {self.__check_in_date} to {self.__check_out_date}, Status: {self.__status}"


class Invoice:
    def __init__(self, invoice_id, booking_id, amount, payment_method, discounts):
        self.__invoice_id = invoice_id
        self.__booking_id = booking_id
        self.__amount = amount
        self.__payment_method = payment_method
        self.__discounts = discounts

    def __str__(self):
        return f"Invoice[{self.__invoice_id}]: BookingID {self.__booking_id}, Amount: ${self.__amount}, Payment: {self.__payment_method}"


# Re-running the customized test suite

class TestSuiteCustom:

    def test_guest_account_creation(self):
        print("Testing Guest Account Creation:")
        guest1 = Guest(1, "Ahmed", "Ahmed123@gmail.com", "0501234567", "Gold")
        guest2 = Guest(2, "", "Mohd12457@gmail.com", "0500000000", "Silver")
        print(guest1)
        print(guest2)
        print()

    def test_search_available_rooms(self):
        print("Testing Searching for Available Rooms:")
        room1 = Room(5000, "single", 150.0, "WiFi, TV", True)
        room2 = Room(5001, "double", 250.0, "WiFi", False)

        rooms = [room1, room2]
        available_rooms = [room for room in rooms if room.is_available()]
        print("Available Rooms:")
        for room in available_rooms:
            print(room)
        print()

    def test_making_room_reservation(self):
        print("Testing Making a Room Reservation:")
        booking1 = Booking(5010, "2025-03-07", "2025-03-12", "Confirmed")
        booking2 = Booking(5020, "2025-03-10", "2025-04-15", "Pending")
        print(booking1)
        print(booking2)
        print()

    def test_booking_confirmation_notification(self):
        print("Testing Booking Confirmation Notification:")
        booking = Booking(6010, "2025-03-07", "2025-02-12", "Confirmed")
        print("Notification: Booking confirmed for", booking)
        print()

    def test_invoice_generation(self):
        print("Testing Invoice Generation for a Booking:")
        invoice = Invoice(7010, 5010, 1250.0, "Credit Card", 0.0)
        print(invoice)
        print()

    def test_payment_processing(self):
        print("Testing Processing Different Payment Methods:")
        invoice1 = Invoice(8010, 5020, 1000.0, "Debit Card", 0.0)
        invoice2 = Invoice(8020, 5030, 900.0, "Cash", 0.0)
        print(invoice1)
        print(invoice2)
        print()

    def test_reservation_history(self):
        print("Testing Displaying Reservation History:")
        guest_bookings = [
            Booking(9010, "2025-04-01", "2025-04-10", "Completed"),
            Booking(9020, "2025-07-04", "2025-07-07", "Cancelled"),
        ]
        for booking in guest_bookings:
            print(booking)
        print()

    def test_cancellation_of_reservation(self):
        print("Testing Cancellation of a Reservation:")
        booking = Booking(1001, "2025-08-01", "2025-08-03", "Confirmed")
        print("Before cancellation:", booking)
        booking._Booking__status = "Cancelled"
        print("After cancellation:", booking)
        print()


# Run customized test cases
custom_suite = TestSuiteCustom()
custom_suite.test_guest_account_creation()
custom_suite.test_search_available_rooms()
custom_suite.test_making_room_reservation()
custom_suite.test_booking_confirmation_notification()
custom_suite.test_invoice_generation()
custom_suite.test_payment_processing()
custom_suite.test_reservation_history()
custom_suite.test_cancellation_of_reservation()
